<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Data Handling</title>
		<script src="loadflash.js"> </script>
		<!-- this needs to be present for height="100%" to work properly in some browsers -->
		<style type="text/css">
			<!--
				body,html {
					margin:0px;
					padding:0px;
					height:100%;
					overflow:hidden;
				}
			-->
		</style>
		<script type="text/vbscript" language="VBScript">
			Sub SlideContent_FSCommand(ByVal command, ByVal args)
				select case command
					case "putHREF" location.href = args
					case "putTitle" document.title = args
					case else call SlideContent_DoFSCommand(command, args)
				end select
			end sub
		</script>
		<script type="text/javascript" language="JavaScript">
			<!--
				function flashPutHref(href) { location.href = href; }
				function flashPutTitle(title) { document.title = title; }
			-->
		</script>
		<script type="text/javascript" language="JavaScript" src="scorm_support/scorm_support.js"></script>
		<script type="text/javascript" language="JavaScript">
			<!--
				// set document.domain property here, if it works for your environment/SCORM implementation
				// document.domain="";
				var g_intAPIType = 0;
				// Hook for Internet Explorer
				if (((navigator.appName && navigator.appName.indexOf("Microsoft") != -1 && navigator.userAgent.indexOf("Windows") != -1 && navigator.userAgent.indexOf("Windows 3.1") == -1) || g_intAPIType == -1) && g_intAPIType != 1)
				{
					g_intAPIType = 0;
				}
				else
				{
					g_intAPIType = 1;
				}
				var strURLFile = "viewer.swf";			// Name of the flash file
				var intIntervalSecs = 1;				// Number of seconds to wait for SCORM API to load
				var g_intAPIOrder = 0;					// Way to search for API object (0 - starts with bottom up; 1 - starts top down)
				var strURLBase = "";
				var strURLParams = "";
				var strURLFull = document.location + "";
				var intTemp = strURLFull.indexOf("#");
				if (intTemp == -1)
					intTemp = strURLFull.indexOf("?");
				if (intTemp > 0)
					strURLParams = strURLFull.substring(intTemp + 1, strURLFull.length);
				var strTemp = location.protocol.toUpperCase();
				if (strTemp.indexOf("FILE") == -1)
				var intTemp = location.pathname.lastIndexOf("/");
				else
				var intTemp = location.pathname.lastIndexOf("\\");
				if (intTemp != -1)
				strURLBase = location.protocol + "//" + location.host + location.pathname.substring(0, intTemp + 1);
				else
				strURLBase = location.protocol + "//" + location.host + location.pathname;

				strURLParams = (strURLParams == unescape(strURLParams))?escape(strURLParams):strURLParams;

				strURLParams = (strURLParams == "" ? "" : "?") + strURLParams;
					
				function sendExitReason(reason)
				{
					(g_zAPIVersion == "0.2" ? g_objAPI.LMSSetValue("cmi.core.exit", reason) : g_objAPI.SetValue("cmi.exit", reason));
				}

				function Finish()
				{
					if ((isAPI()) && (g_bFinishDone == false))
					{
						(g_zAPIVersion == "0.2" ? g_objAPI.LMSCommit("") : g_objAPI.Commit(""));
						sendExitReason("suspend");
						g_bFinishDone = (g_zAPIVersion == "0.2" ? g_objAPI.LMSFinish("") == "true" : g_objAPI.Terminate("") == "true");
					}
					return (g_bFinishDone + "" ) // Force type to string
				}

				if (g_intAPIType == 0)
				{
					// Detect Internet Explorer
					var g_bIsInternetExplorer = navigator.appName.indexOf("Microsoft") != -1;
					// Handle fscommand messages from a Flash movie
					function SlideContent_DoFSCommand(command, parameter, value, variable)
					{
						var SlideContentObj = g_bIsInternetExplorer ? SlideContent : document.SlideContent;

						//var strFSArgs = new String(args);
						var strFSCmd = new String(command);
						var strErr = "true";
						
						var strFSArg1, strFSArg2, strFSArg3;
						strFSArg1 = parameter;
						strFSArg2 = value;
						strFSArg3 = variable;
					
						/*
						var intFSDelimiter = strFSArgs.indexOf("|");
						if (intFSDelimiter > -1)
						{
							strFSArg1 = strFSArgs.substr(0, intFSDelimiter); 	// Name of data element to get from API
							var strFSTemp = strFSArgs.substr(intFSDelimiter + 1);
							intFSDelimiter = strFSTemp.indexOf("|");
							if (intFSDelimiter > -1)
							{
								strFSArg2 = strFSTemp.substr(0, intFSDelimiter);	// Value
								strFSArg3 = strFSTemp.substr(intFSDelimiter + 1);	// Variable
							}
							else
							{
								strFSArg2 = strFSTemp;
							}
						}
						else
						{
							strFSArg1 = strFSArgs;
						}
						*/

						// do nothing, if SCORM API is not available
						if (!isAPI())
							return;

						if (strFSCmd == "LMSInitialize" || strFSCmd=="Initialize")
						{
							SlideContentObj.SetScormVariable(strFSArg3, eval('g_objAPI.' + strFSCmd + '(\"\");'));
						}
						else if (strFSCmd == "LMSSetValue" || strFSCmd=="SetValue")
						{
							strErr = eval('g_objAPI.' + strFSCmd + '(\"' + strFSArg1 + '\",\"' + strFSArg2 + '\");');
							SlideContentObj.SetScormVariable(strFSArg3, strErr);
						}
						else if (strFSCmd == "LMSFinish" || strFSCmd=="Terminate")
						{
							g_bFinishDone = eval('g_objAPI.' + strFSCmd + '(\"\");');
							strErr = g_bFinishDone;
							SlideContentObj.SetScormVariable(strFSArg3, g_bFinishDone);
						}
						else if (strFSCmd == "LMSCommit" || strFSCmd=="Commit")
						{
							strErr = eval('g_objAPI.' + strFSCmd + '(\"\");');
							SlideContentObj.SetScormVariable(strFSArg3, strErr);
						}
						else if ((strFSArg2) && (strFSArg2.length > 0))
						{
							if (strFSCmd=="LMSGetLastError" || strFSCmd=="GetLastError")
							{
								strErr = eval('g_objAPI.' + strFSCmd + '();');
								SlideContentObj.SetScormVariable(strFSArg3, strErr);
							}
							else
							{
								strErr = eval('g_objAPI.' + strFSCmd + '(\"' + strFSArg1 + '\");')
								SlideContentObj.SetScormVariable(strFSArg3, strErr);
							}
						}
						//TODO:The followind will obviously never be true. Will need to look for the correct code--Vikas.
						else if (strFSCmd.substring(0,3) == "LMSGet")
						{
							strErr = "-2: No Flash variable specified"
						}
						else if (strFSCmd=="SendExitReason"){
							//Presenter currently won't use it. But it seems like a nice interface anyways!
							sendExitReason(strFSArg1);
						}

						return strErr;
					}
				}
			-->
		</script>
	</head>
	<body bgcolor="#FFFFFF" onunload="Finish()">
		<layer id="NS_dynamic" name="NS_dynamic">
			<object
					classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
					codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,65,0"
					width="2"
					height="2"
					id="scorm_support"
					align=""
					VIEWASTEXT>
				<param name=movie value="scorm_support/scorm_support.swf">
				<param name=quality value=high>
				<param name=menu value=false>
				<param name=bgcolor value=#FFFFFF>
				<param name="allowScriptAccess" value="sameDomain"/>
				<embed
					src="scorm_support/scorm_support.swf"
					quality="high"
					bgcolor="#FFFFFF"
					width="2"
					height="2"
					name="scorm_support"
					align=""
					type="application/x-shockwave-flash"
					pluginspage="http://www.macromedia.com/go/getflashplayer"
					allowScriptAccess="sameDomain">
				</embed>
			</object>
		</layer>
		<iframe name="IE_dynamic" height=0 width=0 src="scorm_support/scorm_support.htm"></iframe>
		<script type="text/javascript" language="JavaScript">
			var timeCurrent_int = new Date().getTime();
			var timeLimit_int = new Date().getTime() + (intIntervalSecs * 1000);
			// This simply loops for a set period of time, waiting for the API to
			// load and/or be found.  A better solution would be to use setInterval
			// and on the timeout, redirect or load the resulting Captivate file.
			while ((g_objAPI == null) && timeCurrent_int < timeLimit_int)
			{
				g_objAPI = getAPI(g_intAPIOrder);
				timeCurrent_int = new Date().getTime();
			}
			if (g_objAPI != null)
			{
				strURLParams += (strURLParams == "" ? "?" : "&") + "SCORM_API=" + g_zAPIVersion + "&SCORM_TYPE=" + g_intAPIType;
			}
			showFlash(strURLFile + strURLParams, '100%', '100%', false);
		</script>
	</body>
</html>
